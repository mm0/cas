description = "Apereo Central Authentication Service"

defaultTasks "clean", "build"

ext {
    publishSnapshots = Boolean.getBoolean("publishSnapshots")
    publishReleases = Boolean.getBoolean("publishReleases")
    sonatypeUsername = System.getProperty("sonatypeUsername")
    sonatypePassword = System.getProperty("sonatypePassword")
}

buildscript {
    repositories {
        //mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "${artifactory_contextUrl}/wavity"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
        classpath "nl.eveoh:gradle-aspectj:1.6"
		classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.8')
		classpath(group: 'wavity-gradle-plugins', name: 'plugins', version: pluginsVersion)
    }
}

allprojects {
//	apply plugin: 'java'
//    apply plugin: 'maven'
//    apply plugin: 'maven-publish'
//    apply plugin: "idea"
//    apply plugin: "eclipse"
//    apply plugin: "signing"    
	apply plugin: 'com.wavity.version'
	apply plugin: 'com.jfrog.artifactory'
	
	group = 'wavity-cas'
	
	versions {
		major = version_major
		minor = version_minor
		release = version_release
	}
	version = project.versions.getWavityVersion()
	
	repositories {
		maven {
            url "${artifactory_contextUrl}/wavity"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        //mavenLocal()
        mavenCentral()
        jcenter()
		maven {
			url 'https://maven.java.net/content/repositories/releases'
		}
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://jitpack.io" }
        maven { url "http://developer.jasig.org/repo/content/groups/m2-legacy/" }
        maven { url "https://build.shibboleth.net/nexus/content/groups/public" }
        maven { url "http://files.couchbase.com/maven2" }
	}
	
	artifactory {
		contextUrl = "${artifactory_contextUrl}"
		publish {
			contextUrl = "${artifactory_contextUrl}"
			repository {
				if(project.hasProperty('release')) {
					repoKey = 'wavity-release'
				} else {
					repoKey = 'wavity-snapshot'
				}
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
		resolve {
			contextUrl = "${artifactory_contextUrl}"
			repository {
				repoKey = 'wavity'
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
		clientConfig.setIncludeEnvVars(true)
		//clientConfig.info.addEnvironmentProperty('wavity.cas.build.tstamp',new java.util.Date().toString())
		//clientConfig.info.setBuildName('wavity-cas')
		//clientConfig.info.setBuildNumber(project.version)
	}
	
	// skip publish of all artifacts
	artifactoryPublish.skip = true
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "idea"
    apply plugin: 'eclipse'
	apply plugin: 'eclipse-wtp'
    apply plugin: "signing"
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'aspectj'
    apply plugin: 'project-report'
    apply from: rootProject.file("gradle/tasks.gradle")
    
    publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
	}
	
	artifactory {
		publish {
			defaults {
				publications('mavenJava')
            	publishArtifacts = true
			}
		}
	}
	
	eclipse {
		classpath {
			downloadSources=true
		}
	}
	eclipse.classpath.file {
		whenMerged { classpath ->
			classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
		}
	}

    test {
        enabled = !Boolean.getBoolean("skipTests")
        maxParallelForks = 1
        useJUnit()
        scanForTestClasses false
        include '**/*Tests.*'
        exclude '**/*Abstract*.*'
        classpath = it.classpath + files("${projectDir}/src/main/resources") +
                files("${projectDir}/src/test/resources")
        testLogging {
	        events "failed", "standardError"
	        exceptionFormat "full"
    	}

    }

    configurations {
        tests

        provided
        compile.extendsFrom(provided)
    }

    configurations.all {
        resolutionStrategy {
//             if (!Boolean.getBoolean("skipVersionConflict")) {
//                 failOnVersionConflict()
//             }
        }
        exclude(group: "cglib", module: "cglib")
        exclude(group: "cglib", module: "cglib-full")
    }

    artifacts {
        tests testJar

        archives sourcesJar
        archives javadocJar
        archives testJar
    }

    signing {
        required = (publishReleases && sonatypeUsername != null && sonatypePassword != null)
        sign configurations.archives
    }

    sourceSets {
        test.resources.srcDirs = ["${projectDir}/src/test/resources", "${projectDir}/src/test/java"]
    }

    javadoc {
        classpath += configurations.provided
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Vendor": project.group,
                    "Created-By": project.group,
                    "Implementation-Date": new Date(),
                    "Implementation-Version": project.version)
        }
    }

    checkstyle {
        configFile new File(rootDir, "checkstyle-rules.xml")
        configProperties = ["checkstyle.suppressions.file": new File(rootDir, "checkstyle-suppressions.xml")]
        ignoreFailures false
        showViolations true
        toolVersion "${checkstyleVersion}"
    }

    checkstyleTest {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    checkstyleMain {
        enabled = !Boolean.getBoolean("skipCheckstyle")
    }

    findbugs {
        toolVersion = "${findbugsVersion}"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
        includeFilter = file("$rootProject.projectDir/findbugs-rules.xml")
    }

    findbugsMain {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    findbugsTest {
        enabled = !Boolean.getBoolean("skipFindbugs")
    }

    dependencies {
        compile group: 'org.aspectj', name: 'aspectjrt', version: aspectjVersion
        compile group: 'org.aspectj', name: 'aspectjweaver', version: aspectjVersion
        compile group: 'javax.validation', name: 'validation-api', version: javaxValidationVersion
		compile (group: 'org.slf4j', name: 'slf4j-api', version: project.versions.slf4jVersion)
        
        // wavity
        compile (group: 'wavity-dependency', name: 'wavity-dependency', version: project.versions.wavityDependencyVersion) {
        	transitive = true
			exclude group: 'javax.json', module: 'javax.json-api'
			exclude group: 'javax', module: 'javaee-api'
			exclude group: 'javax', module: 'javaee-web-api'
			exclude group: 'javax', module: 'javaee-endorsed-api'
			exclude group: 'junit', module: 'junit'
			exclude group: 'org.slf4j'
			exclude group: 'net.sf.ehcache'
			exclude group: 'org.ehcache'
			exclude group: 'com.fasterxml.jackson.core'
			exclude group: 'org.codehaus.jackson'
			exclude group: 'log4j'
			exclude group: 'org.apache.logging.log4j'
			exclude group: 'org.apache.zookeeper'
			exclude group: 'org.javassist'
			exclude group: 'com.google.guava'
			exclude group: 'xml-security', module: 'xmlsec'
			exclude group: 'org.springframework'
			exclude group: 'wavity-ams'
			exclude group: 'wavity-cas-client'
			exclude group: 'wavity-rest-client'
		}

        if (!Boolean.getBoolean("skipAspectJ")) {
            compile(group: 'org.jasig.inspektr', name: 'inspektr-aspects', version: inspektrVersion) {
                exclude(module: 'validation-api')
                exclude(module: 'aspectjrt')
                exclude(module: 'slf4j-api')
            }

            aspectpath(group: 'org.jasig.inspektr', name: 'inspektr-aspects', version: inspektrVersion) {
                exclude(module: 'validation-api')
                exclude(module: 'aspectjrt')
                exclude(module: 'slf4j-api')
            }
        }

        if (!Boolean.getBoolean("skipFindbugs")) {
            findbugs group: 'com.google.code.findbugs', name: 'findbugs', version: findbugsVersion
            findbugs configurations.findbugsPlugins.dependencies
            findbugsPlugins group: 'com.mebigfatguy.fb-contrib', name: 'fb-contrib', version: findbugsContribVersion
            findbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: findbugsSecVersion
        }

        runtime(group: 'org.glassfish.web', name: 'javax.el', version: javaxElImplVersion) {
            exclude(module: 'javax.el-api')
        }
        runtime group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVersion
        runtime group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
        runtime group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
        runtime(group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4jVersion) {
            exclude(module: 'slf4j-api')
        }
        runtime group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: log4jVersion
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile(group: 'org.mockito', name: 'mockito-core', version: mockitoVersion) {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
        provided group: 'javax.servlet', name: 'javax.servlet-api', version: javaxSevletVersion
        provided group: 'javax.el', name: 'javax.el-api', version: javaxElVersion
    }

    /*
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                if (publishReleases) {
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                if (publishSnapshots) {
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: sonatypeUsername, password: sonatypePassword);
                    }
                }

                pom.project {
                    url "http://www.apereo.org/cas"
                    inceptionYear 2004
                    name project.name
                    description project.name
                    issueManagement {
                        system "Github"
                        url "https://github.com/Jasig/cas/issues"
                    }

                    scm {
                        url 'scm:git@github.com:Jasig/cas.git'
                        connection 'scm:git@github.com:Jasig/cas.git'
                        developerConnection 'scm:git@github.com:Jasig/cas.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'leleuj'
                            name 'Jérôme Leleu'
                        }
                        developer {
                            id 'apetro'
                            name 'Andrew Petro'
                        }
                        developer {
                            id 'wgthom'
                            name 'William G. Thompson'
                        }
                        developer {
                            id 'serac'
                            name 'Marvin S. Addison'
                        }
                        developer {
                            id 'battags'
                            name 'Scott Battaglia'
                        }
                        developer {
                            id 'mmoayyed'
                            name 'Misagh Moayyed'
                        }
                        developer {
                            id 'robertoschwald'
                            name 'Robert Oschwald'
                        }
                    }

                    contributors {
                        contributor {
                            name "Adam Rybicki"
                            email "arybicki@unicon.net"
                        }
                        contributor {
                            name "Andrew Tillinghast"
                            email "atilling@conncoll.edu"
                        }
                        contributor {
                            name "Arnaud Lesueur"
                            email "arnaud.lesueur@gmail.com"
                        }
                        contributor {
                            name "Daniel Frett"
                            email "daniel.frett@ccci.org"
                        }
                        contributor {
                            name "Dmitriy Kopylenko"
                            email "dima767@gmail.com"
                        }
                        contributor {
                            name "Drew Mazurek"
                            email "dmazurek@unicon.net"
                        }
                        contributor {
                            name "Eric Dalquist"
                            email "eric.dalquist@doit.wisc.edu"
                        }
                        contributor {
                            name "Eric Pierce"
                            email "epierce@usf.edu"
                        }
                        contributor {
                            name "Frederic Esnault"
                            email "esnault.frederic@gmail.com"
                        }
                        contributor {
                            name "Howard Gilbert"
                            email "Howard.Gilbert@yale.edu"
                        }
                        contributor {
                            name "Jan Van der Velpen"
                            email "velpi@industria.be"
                        }
                        contributor {
                            name "John Martin"
                            email "jmartin@unicon.net"
                        }
                        contributor {
                            name "MarcAntoine Garrigue"
                            email "marc.antoine.garrigue@gmail.com"
                        }
                        contributor {
                            name "Mihir Patel"
                            email "exploremihir@gmail.com"
                        }
                        contributor {
                            name "Fredrik Jönsson"
                            email "fjo@kth.se"
                        }
                    }

                    mailingLists {
                        mailingList {
                            name "cas-user"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-user"
                            post "cas-user@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-user"
                        }
                        mailingList {
                            name "cas-dev"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-dev"
                            post "cas-dev@apereo.org"
                            archive "https://groups.google.com/forum/#!forum/jasig-cas-dev"
                        }
                        mailingList {
                            name "cas-announce"
                            subscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            unsubscribe "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                            post "cas-announce@apereo.org"
                            archive "https://groups.google.com/a/apereo.org/forum/#!forum/cas-announce"
                        }
                    }

                }
            }
        }

    }
    */

}

/**
 * Aggregate all javadocs into a single directory
 **/
task javadoc(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
} 
